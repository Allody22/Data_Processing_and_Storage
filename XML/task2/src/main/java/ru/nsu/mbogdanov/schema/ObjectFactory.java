//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.2 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.03.10 at 08:44:53 PM GMT+07:00 
//


package ru.nsu.mbogdanov.schema;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlIDREF;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.namespace.QName;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the ru.nsu.mbogdanov.schema package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

    private final static QName _SiblingsTypeBrothers_QNAME = new QName("", "brothers");
    private final static QName _SiblingsTypeSisters_QNAME = new QName("", "sisters");
    private final static QName _ChildrenTypeChild_QNAME = new QName("", "child");

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: ru.nsu.mbogdanov.schema
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link People }
     * 
     */
    public People createPeople() {
        return new People();
    }

    /**
     * Create an instance of {@link PersonType }
     * 
     */
    public PersonType createPersonType() {
        return new PersonType();
    }

    /**
     * Create an instance of {@link ParentsType }
     * 
     */
    public ParentsType createParentsType() {
        return new ParentsType();
    }

    /**
     * Create an instance of {@link ChildrenType }
     * 
     */
    public ChildrenType createChildrenType() {
        return new ChildrenType();
    }

    /**
     * Create an instance of {@link SpouseType }
     * 
     */
    public SpouseType createSpouseType() {
        return new SpouseType();
    }

    /**
     * Create an instance of {@link SiblingsType }
     * 
     */
    public SiblingsType createSiblingsType() {
        return new SiblingsType();
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "brothers", scope = SiblingsType.class)
    @XmlIDREF
    public JAXBElement<Object> createSiblingsTypeBrothers(Object value) {
        return new JAXBElement<Object>(_SiblingsTypeBrothers_QNAME, Object.class, SiblingsType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "sisters", scope = SiblingsType.class)
    @XmlIDREF
    public JAXBElement<Object> createSiblingsTypeSisters(Object value) {
        return new JAXBElement<Object>(_SiblingsTypeSisters_QNAME, Object.class, SiblingsType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "child", scope = ChildrenType.class)
    @XmlIDREF
    public JAXBElement<Object> createChildrenTypeChild(Object value) {
        return new JAXBElement<Object>(_ChildrenTypeChild_QNAME, Object.class, ChildrenType.class, value);
    }

}
