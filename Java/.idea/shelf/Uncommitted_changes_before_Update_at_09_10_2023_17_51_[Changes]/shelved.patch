Index: ../JavaConcurrency/settings.gradle.kts
===================================================================
diff --git a/../JavaConcurrency/settings.gradle.kts b/../JavaConcurrency/settings.gradle.kts
deleted file mode 100644
--- a/../JavaConcurrency/settings.gradle.kts	(revision 88acfa2788fd2ac5e631acb7048c621126cbd9ce)
+++ /dev/null	(revision 88acfa2788fd2ac5e631acb7048c621126cbd9ce)
@@ -1,2 +0,0 @@
-rootProject.name = "JavaConcurrency"
-
Index: ../JavaConcurrency/src/main/java/ru/nsu/bogdanov/Task5.java
===================================================================
diff --git a/../JavaConcurrency/src/main/java/ru/nsu/bogdanov/Task5.java b/../JavaConcurrency/src/main/java/ru/nsu/bogdanov/Task5.java
deleted file mode 100644
--- a/../JavaConcurrency/src/main/java/ru/nsu/bogdanov/Task5.java	(revision 88acfa2788fd2ac5e631acb7048c621126cbd9ce)
+++ /dev/null	(revision 88acfa2788fd2ac5e631acb7048c621126cbd9ce)
@@ -1,30 +0,0 @@
-package ru.nsu.bogdanov;
-
-public class Task5 {
-
-    public static void main(String[] args) {
-        // Задача для дочерней нити
-        Runnable runnableThread = () -> {
-            while (!Thread.currentThread().isInterrupted()) {
-                System.out.println("Я не главная нить и я печатаю");
-            }
-            System.out.println("Сейчас нить завершится");
-        };
-
-        // Запуск задачи в новой нити
-        Thread childThread = new Thread(runnableThread);
-        childThread.start();
-
-        // Главная нить ждет 2 секунды перед тем как прервать дочернюю нить
-        try {
-            Thread.sleep(2000);
-        } catch (InterruptedException exception) {
-            // catch блок активируется в случае, если текущая нить (главная нить)
-            // будет прервана другой нитью во время своего сна (вызова Thread.sleep)
-            System.out.println("Что-то пошло не так....");
-        }
-
-        // Прерываем дочернюю нить
-        childThread.interrupt();
-    }
-}
Index: ../JavaConcurrency/src/main/java/ru/nsu/bogdanov/Task3.java
===================================================================
diff --git a/../JavaConcurrency/src/main/java/ru/nsu/bogdanov/Task3.java b/../JavaConcurrency/src/main/java/ru/nsu/bogdanov/Task3.java
deleted file mode 100644
--- a/../JavaConcurrency/src/main/java/ru/nsu/bogdanov/Task3.java	(revision 88acfa2788fd2ac5e631acb7048c621126cbd9ce)
+++ /dev/null	(revision 88acfa2788fd2ac5e631acb7048c621126cbd9ce)
@@ -1,39 +0,0 @@
-package ru.nsu.bogdanov;
-
-import java.util.Arrays;
-import java.util.List;
-
-public class Task3 {
-
-    //Класс, реализующий Runnable интерфейс
-    public static class PrintList<T> implements Runnable {
-        //Этот список мы будем печатать
-        private final List<T> list;
-
-        //Ну это конструктор этого класса
-        public PrintList(List<T> list) {
-            this.list = list;
-        }
-
-        //Вот собственно это функцию мы и реализуем
-        @Override
-        public void run() {
-            list.forEach(System.out::println);  // печатаем каждую нить
-        }
-    }
-
-    public static void main(String[] args) {
-        List<Runnable> tasks = Arrays.asList(
-                //Каждая нить должна печатать какие-то строки
-                new PrintList<>(Arrays.asList("1 ", "ПЕРВАЯ ", "ONE")),
-                new PrintList<>(Arrays.asList("2 ", "ВТОРАЯ ", "SECOND")),
-                new PrintList<>(Arrays.asList("3 ", "ТРЕТЬЯ ", "THIRD")),
-                new PrintList<>(Arrays.asList("4", "ЧЁТВЕРТАЯ ", "FOUR"))
-        );
-
-        tasks.stream()
-                // создаем новую нить для каждой задачи и запускаем её
-                .map(Thread::new)
-                .forEach(Thread::start);
-    }
-}
Index: ../JavaConcurrency/gradlew.bat
===================================================================
diff --git a/../JavaConcurrency/gradlew.bat b/../JavaConcurrency/gradlew.bat
deleted file mode 100644
--- a/../JavaConcurrency/gradlew.bat	(revision 88acfa2788fd2ac5e631acb7048c621126cbd9ce)
+++ /dev/null	(revision 88acfa2788fd2ac5e631acb7048c621126cbd9ce)
@@ -1,89 +0,0 @@
-@rem
-@rem Copyright 2015 the original author or authors.
-@rem
-@rem Licensed under the Apache License, Version 2.0 (the "License");
-@rem you may not use this file except in compliance with the License.
-@rem You may obtain a copy of the License at
-@rem
-@rem      https://www.apache.org/licenses/LICENSE-2.0
-@rem
-@rem Unless required by applicable law or agreed to in writing, software
-@rem distributed under the License is distributed on an "AS IS" BASIS,
-@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-@rem See the License for the specific language governing permissions and
-@rem limitations under the License.
-@rem
-
-@if "%DEBUG%" == "" @echo off
-@rem ##########################################################################
-@rem
-@rem  Gradle startup script for Windows
-@rem
-@rem ##########################################################################
-
-@rem Set local scope for the variables with windows NT shell
-if "%OS%"=="Windows_NT" setlocal
-
-set DIRNAME=%~dp0
-if "%DIRNAME%" == "" set DIRNAME=.
-set APP_BASE_NAME=%~n0
-set APP_HOME=%DIRNAME%
-
-@rem Resolve any "." and ".." in APP_HOME to make it shorter.
-for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi
-
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
-
-@rem Find java.exe
-if defined JAVA_HOME goto findJavaFromJavaHome
-
-set JAVA_EXE=java.exe
-%JAVA_EXE% -version >NUL 2>&1
-if "%ERRORLEVEL%" == "0" goto execute
-
-echo.
-echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:findJavaFromJavaHome
-set JAVA_HOME=%JAVA_HOME:"=%
-set JAVA_EXE=%JAVA_HOME%/bin/java.exe
-
-if exist "%JAVA_EXE%" goto execute
-
-echo.
-echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:execute
-@rem Setup the command line
-
-set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
-
-
-@rem Execute Gradle
-"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
-
-:end
-@rem End local scope for the variables with windows NT shell
-if "%ERRORLEVEL%"=="0" goto mainEnd
-
-:fail
-rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
-rem the _cmd.exe /c_ return code!
-if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
-exit /b 1
-
-:mainEnd
-if "%OS%"=="Windows_NT" endlocal
-
-:omega
Index: ../JavaConcurrency/src/main/java/ru/nsu/bogdanov/Task2.java
===================================================================
diff --git a/../JavaConcurrency/src/main/java/ru/nsu/bogdanov/Task2.java b/../JavaConcurrency/src/main/java/ru/nsu/bogdanov/Task2.java
deleted file mode 100644
--- a/../JavaConcurrency/src/main/java/ru/nsu/bogdanov/Task2.java	(revision 88acfa2788fd2ac5e631acb7048c621126cbd9ce)
+++ /dev/null	(revision 88acfa2788fd2ac5e631acb7048c621126cbd9ce)
@@ -1,38 +0,0 @@
-package ru.nsu.bogdanov;
-
-public class Task2 {
-
-    public static void main(String[] args) {
-
-        final int LOOP_TASK2_ITERATOR = 10;
-
-        // Описание задачи для новой нити
-        Runnable task = () -> {
-            for (int i = 0; i < LOOP_TASK2_ITERATOR; ++i) {
-                System.out.println("Элемент цикла номер :" + i + " от новой нити");
-            }
-        };
-
-        // Создание новой нити с указанной задачей
-        Thread thread = new Thread(task);
-
-        // Запуск новой нити
-        thread.start();
-
-        // Ожидание завершения новой нити перед продолжением главной нити
-        try {
-            thread.join();
-        } catch (InterruptedException e) {
-            // Для больших проектов лучше использоваться логирования для отлавливания таких ошибок.
-            // Сам IntelliJ об этом предупреждает
-            e.printStackTrace();
-        }
-
-        System.out.println("Новая нить закончила");
-
-        // Вывод строки из главной нити (потока)
-        for (int i = 0; i < LOOP_TASK2_ITERATOR; ++i) {
-            System.out.println("Элемент цикла номер :" + i + " от главной нити");
-        }
-    }
-}
Index: ../JavaConcurrency/src/main/java/ru/nsu/bogdanov/task7/CalculationManager.java
===================================================================
diff --git a/../JavaConcurrency/src/main/java/ru/nsu/bogdanov/task7/CalculationManager.java b/../JavaConcurrency/src/main/java/ru/nsu/bogdanov/task7/CalculationManager.java
deleted file mode 100644
--- a/../JavaConcurrency/src/main/java/ru/nsu/bogdanov/task7/CalculationManager.java	(revision 88acfa2788fd2ac5e631acb7048c621126cbd9ce)
+++ /dev/null	(revision 88acfa2788fd2ac5e631acb7048c621126cbd9ce)
@@ -1,67 +0,0 @@
-package ru.nsu.bogdanov.task7;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.BrokenBarrierException;
-import java.util.concurrent.CyclicBarrier;
-
-/**
- * Класс менеджера вычислений, предназначен для параллельного вычисления числа π с использованием ряда Лейбница.
- */
-public class CalculationManager {
-    private final CyclicBarrier barrier;
-    private final int threadsNumber;
-    private final int partialSumLength;
-    private volatile double pi = 0.0;
-
-    /**
-     * Конструктор класса CalculationManager.
-     *
-     * @param threadsNumber    Количество потоков для параллельного вычисления.
-     * @param partialSumLength Количество итераций для каждого потока.
-     */
-    public CalculationManager(int threadsNumber, int partialSumLength) {
-        this.threadsNumber = threadsNumber;
-        this.partialSumLength = partialSumLength;
-
-        // Создаем CyclicBarrier, который будет ждать завершения всех потоков,
-        // а также учитывает главный поток, поэтому +1.
-        this.barrier = new CyclicBarrier(threadsNumber + 1);
-    }
-
-    /**
-     * Метод для получения вычисленного значения числа π.
-     *
-     * @return Приближенное значение числа π.
-     */
-    public double getResult() {
-        return pi;
-    }
-
-    /**
-     * Инициализирует и выполняет вычисления приближенного значения числа π.
-     * Для этого создает потоки, запускает их на выполнение, а затем ожидает их завершения
-     * и суммирует результаты.
-     */
-    public void execute() {
-        List<PartialSumTask> tasks = new ArrayList<>();
-
-        // Создаем потоки для вычисления частичных сумм ряда Лейбница.
-        for (int i = 0; i < threadsNumber; ++i) {
-            tasks.add(new PartialSumTask(barrier, i * partialSumLength, partialSumLength));
-            new Thread(tasks.get(i)).start();
-        }
-
-        // Ожидаем завершения всех потоков перед продолжением выполнения.
-        try {
-            barrier.await();
-        } catch (InterruptedException | BrokenBarrierException e) {
-            e.printStackTrace();
-        }
-
-        // Собираем результаты из всех потоков и вычисляем общее приближенное значение числа π.
-        for (PartialSumTask task : tasks) {
-            pi += 4.0 * task.getResult();
-        }
-    }
-}
Index: ../JavaConcurrency/src/main/java/ru/nsu/bogdanov/Task1.java
===================================================================
diff --git a/../JavaConcurrency/src/main/java/ru/nsu/bogdanov/Task1.java b/../JavaConcurrency/src/main/java/ru/nsu/bogdanov/Task1.java
deleted file mode 100644
--- a/../JavaConcurrency/src/main/java/ru/nsu/bogdanov/Task1.java	(revision 88acfa2788fd2ac5e631acb7048c621126cbd9ce)
+++ /dev/null	(revision 88acfa2788fd2ac5e631acb7048c621126cbd9ce)
@@ -1,27 +0,0 @@
-package ru.nsu.bogdanov;
-
-public class Task1 {
-
-    public static void main(String[] args) {
-
-        final int LOOP_TASK1_ITERATOR = 10;
-
-        // Описание задачи для новой нити
-        Runnable task = () -> {
-            for (int i = 0; i < LOOP_TASK1_ITERATOR; ++i) {
-                System.out.println("Элемент цикла номер :" + i + " от новой нити");
-            }
-        };
-
-        // Создание новой нити с указанной задачей
-        Thread thread = new Thread(task);
-
-        // Запуск новой нити
-        thread.start();
-
-        // Вывод строки из главной нити (потока)
-        for (int i = 0; i < LOOP_TASK1_ITERATOR; ++i) {
-            System.out.println("Элемент цикла номер :" + i + " от главной нити");
-        }
-    }
-}
Index: ../JavaConcurrency/gradle/wrapper/gradle-wrapper.properties
===================================================================
diff --git a/../JavaConcurrency/gradle/wrapper/gradle-wrapper.properties b/../JavaConcurrency/gradle/wrapper/gradle-wrapper.properties
deleted file mode 100644
--- a/../JavaConcurrency/gradle/wrapper/gradle-wrapper.properties	(revision 88acfa2788fd2ac5e631acb7048c621126cbd9ce)
+++ /dev/null	(revision 88acfa2788fd2ac5e631acb7048c621126cbd9ce)
@@ -1,6 +0,0 @@
-#Sun Sep 17 18:58:29 GMT+07:00 2023
-distributionBase=GRADLE_USER_HOME
-distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-8.2-bin.zip
-zipStoreBase=GRADLE_USER_HOME
-zipStorePath=wrapper/dists
Index: ../JavaConcurrency/.gitignore
===================================================================
diff --git a/../JavaConcurrency/.gitignore b/../JavaConcurrency/.gitignore
deleted file mode 100644
--- a/../JavaConcurrency/.gitignore	(revision 88acfa2788fd2ac5e631acb7048c621126cbd9ce)
+++ /dev/null	(revision 88acfa2788fd2ac5e631acb7048c621126cbd9ce)
@@ -1,44 +0,0 @@
-.gradle
-.idea
-build/
-!gradle/wrapper/gradle-wrapper.jar
-!**/src/main/**/build/
-!**/src/test/**/build/
-
-### IntelliJ IDEA ###
-.idea/modules.xml
-.idea/jarRepositories.xml
-.idea/compiler.xml
-.idea/libraries/
-*.iws
-*.iml
-*.ipr
-out/
-!**/src/main/**/out/
-!**/src/test/**/out/
-
-### Eclipse ###
-.apt_generated
-.classpath
-.factorypath
-.project
-.settings
-.springBeans
-.sts4-cache
-bin/
-!**/src/main/**/bin/
-!**/src/test/**/bin/
-
-### NetBeans ###
-/nbproject/private/
-/nbbuild/
-/dist/
-/nbdist/
-/.nb-gradle/
-
-### VS Code ###
-.vscode/
-
-### Mac OS ###
-.DS_Store
-/.idea/
Index: ../JavaConcurrency/build.gradle.kts
===================================================================
diff --git a/../JavaConcurrency/build.gradle.kts b/../JavaConcurrency/build.gradle.kts
deleted file mode 100644
--- a/../JavaConcurrency/build.gradle.kts	(revision 88acfa2788fd2ac5e631acb7048c621126cbd9ce)
+++ /dev/null	(revision 88acfa2788fd2ac5e631acb7048c621126cbd9ce)
@@ -1,19 +0,0 @@
-plugins {
-    id("java")
-}
-
-group = "org.example"
-version = "1.0-SNAPSHOT"
-
-repositories {
-    mavenCentral()
-}
-
-dependencies {
-    testImplementation(platform("org.junit:junit-bom:5.9.1"))
-    testImplementation("org.junit.jupiter:junit-jupiter")
-}
-
-tasks.test {
-    useJUnitPlatform()
-}
\ No newline at end of file
Index: ../JavaConcurrency/src/main/java/ru/nsu/bogdanov/Task4.java
===================================================================
diff --git a/../JavaConcurrency/src/main/java/ru/nsu/bogdanov/Task4.java b/../JavaConcurrency/src/main/java/ru/nsu/bogdanov/Task4.java
deleted file mode 100644
--- a/../JavaConcurrency/src/main/java/ru/nsu/bogdanov/Task4.java	(revision 88acfa2788fd2ac5e631acb7048c621126cbd9ce)
+++ /dev/null	(revision 88acfa2788fd2ac5e631acb7048c621126cbd9ce)
@@ -1,29 +0,0 @@
-package ru.nsu.bogdanov;
-
-public class Task4 {
-
-    public static void main(String[] args) {
-        // Задача для дочерней нити
-        Runnable runnableThread = () -> {
-            while (!Thread.currentThread().isInterrupted()) {
-                System.out.println("Я не главная нить и я печатаю");
-            }
-        };
-
-        // Запуск задачи в новой нити
-        Thread childThread = new Thread(runnableThread);
-        childThread.start();
-
-        // Главная нить ждет 2 секунды перед тем как прервать дочернюю нить
-        try {
-            Thread.sleep(2000);
-        } catch (InterruptedException exception) {
-            // catch блок активируется в случае, если текущая нить (главная нить)
-            // будет прервана другой нитью во время своего сна (вызова Thread.sleep)
-            System.out.println("Main thread was interrupted unexpectedly.");
-        }
-
-        // Прерываем дочернюю нить
-        childThread.interrupt();
-    }
-}
Index: ../JavaConcurrency/src/main/java/ru/nsu/bogdanov/task7/PartialSumTask.java
===================================================================
diff --git a/../JavaConcurrency/src/main/java/ru/nsu/bogdanov/task7/PartialSumTask.java b/../JavaConcurrency/src/main/java/ru/nsu/bogdanov/task7/PartialSumTask.java
deleted file mode 100644
--- a/../JavaConcurrency/src/main/java/ru/nsu/bogdanov/task7/PartialSumTask.java	(revision 88acfa2788fd2ac5e631acb7048c621126cbd9ce)
+++ /dev/null	(revision 88acfa2788fd2ac5e631acb7048c621126cbd9ce)
@@ -1,76 +0,0 @@
-package ru.nsu.bogdanov.task7;
-
-import java.text.DecimalFormat;
-import java.util.concurrent.BrokenBarrierException;
-import java.util.concurrent.CyclicBarrier;
-
-/**
- * Задача для вычисления части суммы ряда Лейбница для определенного диапазона значений.
- */
-public class PartialSumTask implements Runnable {
-
-    private final CyclicBarrier barrier;
-
-    private final int from;
-
-    private final int length;
-
-    private volatile double partialSum = 0;
-
-    /**
-     * Конструктор задачи PartialSumTask.
-     *
-     * @param barrier Барьер для синхронизации потоков.
-     * @param from    Начальное значение диапазона.
-     * @param length  Длина диапазона.
-     */
-    public PartialSumTask(CyclicBarrier barrier, int from, int length) {
-        this.barrier = barrier;
-        this.from = from;
-        this.length = length;
-    }
-
-    /**
-     * Возвращает части суммы ряда Лейбница для данного потока.
-     *
-     * @return Части суммы.
-     */
-    public double getResult() {
-        return partialSum;
-    }
-
-    /**
-     * Выполняет вычисления для заданного диапазона значений.
-     */
-    @Override
-    public void run() {
-        // Цикл обрабатывает заданный диапазон значений для этого потока.
-        for (int i = this.from; i < this.from + this.length; ++i) {
-            // Вычисление отдельного члена ряда Лейбница.
-            // Чем больше членов ряда мы учитываем, тем точнее будет наше приближение к π.
-            double summand = 1.0 / (2.0 * i + 1.0);
-
-            // Если i четное, мы добавляем член ряда, иначе вычитаем.
-            // Это основывается на формуле ряда Лейбница: π/4 = 1 - 1/3 + 1/5 - 1/7 + 1/9 - ...
-            partialSum += (i % 2 != 0) ? (-1.0) * summand : summand;
-        }
-
-        // Выводим сообщение о том, какой поток и какую сумму частичную посчитал.
-        // Можно было бы писать о том, что поток просто досчитал, но чисто в научных целях хочется посмотреть конкретное число
-        //Для вывода значений в нормальном формате используем специальный класс
-        DecimalFormat df = new DecimalFormat("#.#############");
-        //Каждый элемент ряда Лейбница всё меньше и меньше => чем больше поток, тем меньше цифра
-        //Не забываем, что элементы ряда Лейбница еще надо будет умножить на 4, поэтому всё нормально со значениями
-        System.out.println(Thread.currentThread().getName() + ": Current partial sum = " + df.format(partialSum));
-
-
-        // Ожидание у барьера, пока все другие потоки не завершат свои вычисления.
-        // Это гарантирует, что главный поток не продолжит выполнение, пока все потоки не закончат работу.
-        try {
-            barrier.await();
-        } catch (InterruptedException | BrokenBarrierException e) {
-            e.printStackTrace();
-        }
-    }
-
-}
Index: ../JavaConcurrency/src/main/java/ru/nsu/bogdanov/task7/Main.java
===================================================================
diff --git a/../JavaConcurrency/src/main/java/ru/nsu/bogdanov/task7/Main.java b/../JavaConcurrency/src/main/java/ru/nsu/bogdanov/task7/Main.java
deleted file mode 100644
--- a/../JavaConcurrency/src/main/java/ru/nsu/bogdanov/task7/Main.java	(revision 88acfa2788fd2ac5e631acb7048c621126cbd9ce)
+++ /dev/null	(revision 88acfa2788fd2ac5e631acb7048c621126cbd9ce)
@@ -1,39 +0,0 @@
-package ru.nsu.bogdanov.task7;
-
-import java.util.Scanner;
-
-public class Main {
-
-    public static void main(String[] args) {
-        // Создаем объект Scanner для чтения ввода пользователя
-        Scanner scanner = new Scanner(System.in);
-
-        System.out.println("Введите количество потоков:");
-
-        int threadsNumber;
-        try {
-            // Пытаемся считать число потоков, которое ввел пользователь
-            threadsNumber = scanner.nextInt();
-        } catch (Exception e) {
-            System.out.println("Ошибка ввода! Пожалуйста, введите корректное число потоков.");
-            return;
-        }
-
-        // Ограничиваем количество потоков до количества доступных процессорных ядер
-        // для оптимизации производительности и избежания излишней многопоточности.
-        // Очень много поток с очень крутым вычислением получится сделать только на очень-очень крутом компе
-        threadsNumber = Math.min(threadsNumber, Runtime.getRuntime().availableProcessors());
-
-        // Создаем объект для управления вычислениями и выполняем вычисления
-        CalculationManager task = new CalculationManager(threadsNumber, 100000);
-        task.execute();
-
-        // Выводим результаты вычислений и сравниваем со значением π из библиотеки джавы
-        System.out.println("Library pi = " + Math.PI);
-
-        //Наше значение числа π с рядом Лейбница будет 100% отличаться от Math.PI.
-        // Чем больше итераций (членов ряда) добавляется в вычисление, тем ближе результат к реальному значению π.
-        // Но это всё еще вещественные числа, поэтому результат всегда будет немного отличаться от значения π.
-        System.out.println("Calculated pi = " + task.getResult());
-    }
-}
